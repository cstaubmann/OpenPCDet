2022-08-31 03:28:03,872   INFO  **********************Start logging**********************
2022-08-31 03:28:03,872   INFO  CUDA_VISIBLE_DEVICES=ALL
2022-08-31 03:28:03,872   INFO  cfg_file         ./cfgs/once_models/sup_models/centerpoints.yaml
2022-08-31 03:28:03,872   INFO  batch_size       2
2022-08-31 03:28:03,872   INFO  epochs           80
2022-08-31 03:28:03,872   INFO  workers          4
2022-08-31 03:28:03,872   INFO  extra_tag        default
2022-08-31 03:28:03,872   INFO  ckpt             None
2022-08-31 03:28:03,872   INFO  pretrained_model None
2022-08-31 03:28:03,872   INFO  launcher         none
2022-08-31 03:28:03,872   INFO  tcp_port         18888
2022-08-31 03:28:03,872   INFO  sync_bn          False
2022-08-31 03:28:03,872   INFO  fix_random_seed  False
2022-08-31 03:28:03,872   INFO  ckpt_save_interval 1
2022-08-31 03:28:03,872   INFO  local_rank       0
2022-08-31 03:28:03,872   INFO  max_ckpt_save_num 30
2022-08-31 03:28:03,872   INFO  merge_all_iters_to_one_epoch False
2022-08-31 03:28:03,872   INFO  set_cfgs         None
2022-08-31 03:28:03,873   INFO  max_waiting_mins 0
2022-08-31 03:28:03,873   INFO  start_epoch      0
2022-08-31 03:28:03,873   INFO  num_epochs_to_eval 0
2022-08-31 03:28:03,873   INFO  save_to_file     False
2022-08-31 03:28:03,873   INFO  runs_on          server
2022-08-31 03:28:03,873   INFO  cfg.ROOT_DIR: /home/cstaubmann/Documents/TUGraz/Bachelor Thesis/OpenPCDet
2022-08-31 03:28:03,873   INFO  cfg.LOCAL_RANK: 0
2022-08-31 03:28:03,873   INFO  cfg.CLASS_NAMES: ['Car', 'Bus', 'Truck', 'Pedestrian', 'Cyclist']
2022-08-31 03:28:03,873   INFO  
cfg.DATA_CONFIG = edict()
2022-08-31 03:28:03,873   INFO  cfg.DATA_CONFIG.DATASET: ONCEDataset
2022-08-31 03:28:03,873   INFO  cfg.DATA_CONFIG.DATA_PATH: ../data/once
2022-08-31 03:28:03,873   INFO  cfg.DATA_CONFIG.CLOUD_DATA_PATH: /cache/once
2022-08-31 03:28:03,873   INFO  cfg.DATA_CONFIG.POINT_CLOUD_RANGE: [-75.2, -75.2, -5.0, 75.2, 75.2, 3.0]
2022-08-31 03:28:03,873   INFO  
cfg.DATA_CONFIG.INFO_PATH = edict()
2022-08-31 03:28:03,873   INFO  cfg.DATA_CONFIG.INFO_PATH.train: ['once_infos_train.pkl']
2022-08-31 03:28:03,873   INFO  cfg.DATA_CONFIG.INFO_PATH.val: ['once_infos_val.pkl']
2022-08-31 03:28:03,873   INFO  cfg.DATA_CONFIG.INFO_PATH.test: ['once_infos_test.pkl']
2022-08-31 03:28:03,873   INFO  
cfg.DATA_CONFIG.DATA_SPLIT = edict()
2022-08-31 03:28:03,873   INFO  cfg.DATA_CONFIG.DATA_SPLIT.train: train
2022-08-31 03:28:03,873   INFO  cfg.DATA_CONFIG.DATA_SPLIT.test: val
2022-08-31 03:28:03,873   INFO  
cfg.DATA_CONFIG.DATA_AUGMENTOR = edict()
2022-08-31 03:28:03,873   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.DISABLE_AUG_LIST: ['placeholder']
2022-08-31 03:28:03,873   INFO  cfg.DATA_CONFIG.DATA_AUGMENTOR.AUG_CONFIG_LIST: [{'NAME': 'gt_sampling', 'USE_ROAD_PLANE': False, 'DB_INFO_PATH': ['once_dbinfos_train.pkl'], 'PREPARE': {'filter_by_min_points': ['Car:5', 'Bus:5', 'Truck:5', 'Pedestrian:5', 'Cyclist:5']}, 'SAMPLE_GROUPS': ['Car:1', 'Bus:4', 'Truck:3', 'Pedestrian:2', 'Cyclist:2'], 'NUM_POINT_FEATURES': 4, 'REMOVE_EXTRA_WIDTH': [0.0, 0.0, 0.0], 'LIMIT_WHOLE_SCENE': True}, {'NAME': 'random_world_flip', 'ALONG_AXIS_LIST': ['x', 'y']}, {'NAME': 'random_world_rotation', 'WORLD_ROT_ANGLE': [-0.78539816, 0.78539816]}, {'NAME': 'random_world_scaling', 'WORLD_SCALE_RANGE': [0.95, 1.05]}]
2022-08-31 03:28:03,873   INFO  
cfg.DATA_CONFIG.POINT_FEATURE_ENCODING = edict()
2022-08-31 03:28:03,873   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.encoding_type: absolute_coordinates_encoding
2022-08-31 03:28:03,873   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.used_feature_list: ['x', 'y', 'z', 'intensity']
2022-08-31 03:28:03,873   INFO  cfg.DATA_CONFIG.POINT_FEATURE_ENCODING.src_feature_list: ['x', 'y', 'z', 'intensity']
2022-08-31 03:28:03,873   INFO  cfg.DATA_CONFIG.DATA_PROCESSOR: [{'NAME': 'mask_points_and_boxes_outside_range', 'REMOVE_OUTSIDE_BOXES': True}, {'NAME': 'shuffle_points', 'SHUFFLE_ENABLED': {'train': True, 'test': False}}, {'NAME': 'transform_points_to_voxels', 'VOXEL_SIZE': [0.1, 0.1, 0.2], 'MAX_POINTS_PER_VOXEL': 5, 'MAX_NUMBER_OF_VOXELS': {'train': 60000, 'test': 60000}}]
2022-08-31 03:28:03,873   INFO  cfg.DATA_CONFIG._BASE_CONFIG_: cfgs/dataset_configs/once_dataset.yaml
2022-08-31 03:28:03,873   INFO  
cfg.MODEL = edict()
2022-08-31 03:28:03,874   INFO  cfg.MODEL.NAME: CenterPoints
2022-08-31 03:28:03,874   INFO  
cfg.MODEL.VFE = edict()
2022-08-31 03:28:03,874   INFO  cfg.MODEL.VFE.NAME: MeanVFE
2022-08-31 03:28:03,874   INFO  
cfg.MODEL.BACKBONE_3D = edict()
2022-08-31 03:28:03,874   INFO  cfg.MODEL.BACKBONE_3D.NAME: VoxelResBackBone8x
2022-08-31 03:28:03,874   INFO  
cfg.MODEL.MAP_TO_BEV = edict()
2022-08-31 03:28:03,874   INFO  cfg.MODEL.MAP_TO_BEV.NAME: HeightCompression
2022-08-31 03:28:03,874   INFO  cfg.MODEL.MAP_TO_BEV.NUM_BEV_FEATURES: 256
2022-08-31 03:28:03,874   INFO  
cfg.MODEL.BACKBONE_2D = edict()
2022-08-31 03:28:03,874   INFO  cfg.MODEL.BACKBONE_2D.NAME: BaseBEVBackbone
2022-08-31 03:28:03,874   INFO  cfg.MODEL.BACKBONE_2D.LAYER_NUMS: [5, 5]
2022-08-31 03:28:03,874   INFO  cfg.MODEL.BACKBONE_2D.LAYER_STRIDES: [1, 2]
2022-08-31 03:28:03,874   INFO  cfg.MODEL.BACKBONE_2D.NUM_FILTERS: [128, 256]
2022-08-31 03:28:03,874   INFO  cfg.MODEL.BACKBONE_2D.UPSAMPLE_STRIDES: [1, 2]
2022-08-31 03:28:03,874   INFO  cfg.MODEL.BACKBONE_2D.NUM_UPSAMPLE_FILTERS: [256, 256]
2022-08-31 03:28:03,874   INFO  
cfg.MODEL.DENSE_HEAD = edict()
2022-08-31 03:28:03,874   INFO  cfg.MODEL.DENSE_HEAD.NAME: CenterHead_
2022-08-31 03:28:03,874   INFO  cfg.MODEL.DENSE_HEAD.CLASS_AGNOSTIC: False
2022-08-31 03:28:03,874   INFO  cfg.MODEL.DENSE_HEAD.DATASET: once
2022-08-31 03:28:03,874   INFO  cfg.MODEL.DENSE_HEAD.MODE: 3d
2022-08-31 03:28:03,874   INFO  cfg.MODEL.DENSE_HEAD.USE_DCN: False
2022-08-31 03:28:03,874   INFO  cfg.MODEL.DENSE_HEAD.TASKS: [{'num_class': 1, 'class_names': ['Car']}, {'num_class': 1, 'class_names': ['Bus']}, {'num_class': 1, 'class_names': ['Truck']}, {'num_class': 1, 'class_names': ['Pedestrian']}, {'num_class': 1, 'class_names': ['Cyclist']}]
2022-08-31 03:28:03,874   INFO  
cfg.MODEL.DENSE_HEAD.PARAMETERS = edict()
2022-08-31 03:28:03,874   INFO  cfg.MODEL.DENSE_HEAD.PARAMETERS.share_conv_channel: 64
2022-08-31 03:28:03,874   INFO  cfg.MODEL.DENSE_HEAD.PARAMETERS.init_bias: -2.19
2022-08-31 03:28:03,874   INFO  
cfg.MODEL.DENSE_HEAD.PARAMETERS.common_heads = edict()
2022-08-31 03:28:03,874   INFO  cfg.MODEL.DENSE_HEAD.PARAMETERS.common_heads.reg: [2, 2]
2022-08-31 03:28:03,874   INFO  cfg.MODEL.DENSE_HEAD.PARAMETERS.common_heads.height: [1, 2]
2022-08-31 03:28:03,874   INFO  cfg.MODEL.DENSE_HEAD.PARAMETERS.common_heads.dim: [3, 2]
2022-08-31 03:28:03,874   INFO  cfg.MODEL.DENSE_HEAD.PARAMETERS.common_heads.rot: [2, 2]
2022-08-31 03:28:03,875   INFO  
cfg.MODEL.DENSE_HEAD.LOSS_CONFIG = edict()
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.LOSS_CONFIG.weight: 0.25
2022-08-31 03:28:03,875   INFO  
cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG = edict()
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.tasks: [{'num_class': 1, 'class_names': ['Car']}, {'num_class': 1, 'class_names': ['Bus']}, {'num_class': 1, 'class_names': ['Truck']}, {'num_class': 1, 'class_names': ['Pedestrian']}, {'num_class': 1, 'class_names': ['Cyclist']}]
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.out_size_factor: 8
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.dense_reg: 1
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.gaussian_overlap: 0.1
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.max_objs: 500
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.min_radius: 2
2022-08-31 03:28:03,875   INFO  
cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.mapping = edict()
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.mapping.Car: 1
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.mapping.Bus: 2
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.mapping.Truck: 3
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.mapping.Pedestrian: 4
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TARGET_ASSIGNER_CONFIG.mapping.Cyclist: 5
2022-08-31 03:28:03,875   INFO  
cfg.MODEL.DENSE_HEAD.TEST_CONFIG = edict()
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.post_center_limit_range: [-75.2, -75.2, -5.0, 75.2, 75.2, 3.0]
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.max_per_img: 500
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.score_threshold: 0.1
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.pc_range: [-75.2, -75.2]
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.out_size_factor: 8
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.voxel_size: [0.1, 0.1]
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.double_flip: False
2022-08-31 03:28:03,875   INFO  
cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms = edict()
2022-08-31 03:28:03,875   INFO  
cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.train = edict()
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.train.use_iou_3d_nms: True
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.train.use_rotate_nms: False
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.train.use_maxpool_nms: False
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.train.use_circle_nms: False
2022-08-31 03:28:03,875   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.train.min_radius: [4, 10, 12, 0.175, 0.85]
2022-08-31 03:28:03,876   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.train.nms_iou_threshold: 0.8
2022-08-31 03:28:03,876   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.train.nms_pre_max_size: 1500
2022-08-31 03:28:03,876   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.train.nms_post_max_size: 80
2022-08-31 03:28:03,876   INFO  
cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.test = edict()
2022-08-31 03:28:03,876   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.test.use_iou_3d_nms: True
2022-08-31 03:28:03,876   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.test.use_rotate_nms: False
2022-08-31 03:28:03,876   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.test.use_maxpool_nms: False
2022-08-31 03:28:03,876   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.test.use_circle_nms: False
2022-08-31 03:28:03,876   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.test.min_radius: [4, 10, 12, 0.175, 0.85]
2022-08-31 03:28:03,876   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.test.nms_iou_threshold: 0.01
2022-08-31 03:28:03,876   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.test.nms_pre_max_size: 500
2022-08-31 03:28:03,876   INFO  cfg.MODEL.DENSE_HEAD.TEST_CONFIG.nms.test.nms_post_max_size: 83
2022-08-31 03:28:03,876   INFO  
cfg.MODEL.POST_PROCESSING = edict()
2022-08-31 03:28:03,876   INFO  cfg.MODEL.POST_PROCESSING.RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
2022-08-31 03:28:03,876   INFO  cfg.MODEL.POST_PROCESSING.SCORE_THRESH: 0.1
2022-08-31 03:28:03,876   INFO  cfg.MODEL.POST_PROCESSING.OUTPUT_RAW_SCORE: False
2022-08-31 03:28:03,876   INFO  cfg.MODEL.POST_PROCESSING.EVAL_METRIC: once
2022-08-31 03:28:03,876   INFO  
cfg.MODEL.POST_PROCESSING.NMS_CONFIG = edict()
2022-08-31 03:28:03,876   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.MULTI_CLASSES_NMS: False
2022-08-31 03:28:03,876   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_TYPE: nms_gpu
2022-08-31 03:28:03,876   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_THRESH: 0.01
2022-08-31 03:28:03,876   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_PRE_MAXSIZE: 4096
2022-08-31 03:28:03,876   INFO  cfg.MODEL.POST_PROCESSING.NMS_CONFIG.NMS_POST_MAXSIZE: 500
2022-08-31 03:28:03,876   INFO  
cfg.OPTIMIZATION = edict()
2022-08-31 03:28:03,876   INFO  cfg.OPTIMIZATION.BATCH_SIZE_PER_GPU: 4
2022-08-31 03:28:03,876   INFO  cfg.OPTIMIZATION.NUM_EPOCHS: 80
2022-08-31 03:28:03,876   INFO  cfg.OPTIMIZATION.OPTIMIZER: adam_onecycle
2022-08-31 03:28:03,876   INFO  cfg.OPTIMIZATION.LR: 0.003
2022-08-31 03:28:03,876   INFO  cfg.OPTIMIZATION.WEIGHT_DECAY: 0.01
2022-08-31 03:28:03,876   INFO  cfg.OPTIMIZATION.MOMENTUM: 0.9
2022-08-31 03:28:03,877   INFO  cfg.OPTIMIZATION.MOMS: [0.95, 0.85]
2022-08-31 03:28:03,877   INFO  cfg.OPTIMIZATION.PCT_START: 0.4
2022-08-31 03:28:03,877   INFO  cfg.OPTIMIZATION.DIV_FACTOR: 10
2022-08-31 03:28:03,877   INFO  cfg.OPTIMIZATION.DECAY_STEP_LIST: [35, 45]
2022-08-31 03:28:03,877   INFO  cfg.OPTIMIZATION.LR_DECAY: 0.1
2022-08-31 03:28:03,877   INFO  cfg.OPTIMIZATION.LR_CLIP: 1e-07
2022-08-31 03:28:03,877   INFO  cfg.OPTIMIZATION.LR_WARMUP: False
2022-08-31 03:28:03,877   INFO  cfg.OPTIMIZATION.WARMUP_EPOCH: 1
2022-08-31 03:28:03,877   INFO  cfg.OPTIMIZATION.GRAD_NORM_CLIP: 35
2022-08-31 03:28:03,877   INFO  cfg.TAG: centerpoints
2022-08-31 03:28:03,877   INFO  cfg.EXP_GROUP_PATH: cfgs/once_models/sup_models
2022-08-31 03:28:04,492   INFO  Database filter by min points Car: 98140 => 97612
2022-08-31 03:28:04,493   INFO  Database filter by min points Bus: 2263 => 2263
2022-08-31 03:28:04,493   INFO  Database filter by min points Truck: 5048 => 5046
2022-08-31 03:28:04,495   INFO  Database filter by min points Pedestrian: 14320 => 14128
2022-08-31 03:28:04,498   INFO  Database filter by min points Cyclist: 31386 => 31121
2022-08-31 03:28:04,500   INFO  Loading ONCE dataset
2022-08-31 03:28:05,020   INFO  Total samples for ONCE dataset: 4961
2022-08-31 03:28:07,307   INFO  CenterPoints(
  (vfe): MeanVFE()
  (backbone_3d): VoxelResBackBone8x(
    (conv_input): SparseSequential(
      (0): SubMConv3d(4, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (conv1): SparseSequential(
      (0): SparseBasicBlock(
        (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
      (1): SparseBasicBlock(
        (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
    )
    (conv2): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseBasicBlock(
        (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
      (2): SparseBasicBlock(
        (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
    )
    (conv3): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseBasicBlock(
        (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
      (2): SparseBasicBlock(
        (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
    )
    (conv4): SparseSequential(
      (0): SparseSequential(
        (0): SparseConv3d(64, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[0, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseBasicBlock(
        (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
      (2): SparseBasicBlock(
        (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
    )
    (conv_out): SparseSequential(
      (0): SparseConv3d(128, 128, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (map_to_bev_module): HeightCompression()
  (pfe): None
  (backbone_2d): BaseBEVBackbone(
    (blocks): ModuleList(
      (0): Sequential(
        (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
        (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (2): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (3): ReLU()
        (4): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (5): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (8): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (9): ReLU()
        (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (11): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (12): ReLU()
        (13): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (14): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (15): ReLU()
        (16): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (17): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (18): ReLU()
      )
      (1): Sequential(
        (0): ZeroPad2d(padding=(1, 1, 1, 1), value=0.0)
        (1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), bias=False)
        (2): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (3): ReLU()
        (4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (5): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (6): ReLU()
        (7): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (8): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (9): ReLU()
        (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (11): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (12): ReLU()
        (13): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (14): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (15): ReLU()
        (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (17): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (18): ReLU()
      )
    )
    (deblocks): ModuleList(
      (0): Sequential(
        (0): ConvTranspose2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): Sequential(
        (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
  )
  (dense_head): CenterHead_(
    (shared_conv): Sequential(
      (0): Conv2d(512, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (tasks): ModuleList(
      (0): SepHead(
        (reg): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (height): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (dim): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (rot): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (hm): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (1): SepHead(
        (reg): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (height): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (dim): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (rot): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (hm): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (2): SepHead(
        (reg): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (height): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (dim): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (rot): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (hm): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (3): SepHead(
        (reg): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (height): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (dim): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (rot): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (hm): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (4): SepHead(
        (reg): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (height): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (dim): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (rot): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (hm): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
    )
    (crit): FocalLossCenterNet()
    (crit_reg): RegLossCenterNet()
  )
  (point_head): None
  (roi_head): None
)
2022-08-31 03:28:07,310   INFO  **********************Start training cfgs/once_models/sup_models/centerpoints(default)**********************
